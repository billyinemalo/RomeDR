import os
import sys
import json
import time
import logging
import asyncio
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timedelta

from dotenv import load_dotenv
import telegram
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# ----------------- –õ–û–ì–ò/ENV -----------------
logging.basicConfig(level=logging.INFO)
logging.info(f"PTB_RUNTIME {telegram.__version__} | PY_RUNTIME {sys.version}")

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# !!!! –£–ö–ê–ñ–ò –¢–£–¢ Telegram ID –†–æ–º—ã (–∫–∞–∫ —Å—Ç—Ä–æ–∫—É) !!!!
ROMA_ID = os.getenv("ROMA_ID", "123456789")  # <-- –∑–∞–º–µ–Ω–∏ 123... –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—å –≤ .env

# (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä/–∞–¥–º–∏–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
ORGANIZER_ID = os.getenv("ORGANIZER_ID", "")  # –º–æ–∂–Ω–æ –ø—É—Å—Ç—ã–º –æ—Å—Ç–∞–≤–∏—Ç—å

# ----------------- –ú–ï–ù–Æ -----------------
menu = ReplyKeyboardMarkup([
    [KeyboardButton("üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!")],
    [KeyboardButton("‚ú® –í—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ")],
    [KeyboardButton("üïµÔ∏è –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ"), KeyboardButton("‚úçÔ∏è –°–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ")],
    [KeyboardButton("üñº –û—Ç–∫—Ä—ã—Ç–∫–∞"), KeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É")],
    [KeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")],
], resize_keyboard=True)

# ----------------- –ü–ê–ú–Ø–¢–¨ -----------------
DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)
STATE_FILE = os.path.join(DATA_DIR, "state.json")

DEFAULT_STATE = {
    "last_secret": {}  # user_id -> ISO timestamp (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π)
}

def load_state():
    if not os.path.exists(STATE_FILE):
        save_state(DEFAULT_STATE)
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return DEFAULT_STATE.copy()

def save_state(s):
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(s, f, ensure_ascii=False, indent=2)
    except Exception:
        logging.exception("–ù–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å state.json")

STATE = load_state()

# ----------------- HEALTHCHECK –¥–ª—è Render -----------------
def start_health_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200); self.end_headers(); self.wfile.write(b"ok")
        def log_message(self, *_): pass

    port = int(os.environ.get("PORT", "10000"))
    srv = HTTPServer(("0.0.0.0", port), Handler)
    threading.Thread(target=srv.serve_forever, daemon=True).start()
    logging.info(f"Healthcheck server started on :{port}")

# ----------------- –£–¢–ò–õ–ò–¢–´ -----------------
def pretty_sender(u: telegram.User) -> str:
    fn = u.first_name or ""
    ln = u.last_name or ""
    uname = f"@{u.username}" if u.username else ""
    full = (fn + " " + ln).strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    parts = [full]
    if uname: parts.append(uname)
    parts.append(f"id:{u.id}")
    return " / ".join(parts)

async def send_to_roma(context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        await context.bot.send_message(chat_id=ROMA_ID, text=text)
        return True
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –†–æ–º–µ")
        return False

# ----------------- /start -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç–æ—Ä üéÇ\n"
        "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏ —è –ø–µ—Ä–µ–¥–∞–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –†–æ–º–µ –ì—É—Ä–∫–æ –æ—Ç —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏.",
        reply_markup=menu
    )

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# ----------------- –ö–ù–û–ü–ö–ò –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ô -----------------
async def wish_hb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    text = f"üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!\n‚Äî –æ—Ç {pretty_sender(u)}"
    ok = await send_to_roma(context, text)
    if ok:
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–¥–∞–ª –†–æ–º–µ üéà", reply_markup=menu)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ üôè", reply_markup=menu)

async def wish_best(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    text = (
        "‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ñ–µ–ª–∞—é –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –∫–ª–∞—Å—Å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ "
        "–∏ –º–Ω–æ–≥–æ –ø–æ–≤–æ–¥–æ–≤ –¥–ª—è —Ä–∞–¥–æ—Å—Ç–∏! \n‚Äî –æ—Ç " + pretty_sender(u)
    )
    ok = await send_to_roma(context, text)
    if ok:
        await update.message.reply_text("–ü–µ—Ä–µ–¥–∞–ª –ø–æ–∂–µ–ª–∞–Ω–∏—è! ‚ú®", reply_markup=menu)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å üòï", reply_markup=menu)

# –°–ï–ö–†–ï–¢: 50 —Å–æ–æ–±—â–µ–Ω–∏–π ¬´–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è¬ª
SECRET_COOLDOWN = timedelta(hours=1)  # –∞–Ω—Ç–∏—Å–ø–∞–º: —Ä–∞–∑ –≤ —á–∞—Å

async def wish_secret(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    uid = str(u.id)
    now = datetime.utcnow()

    # –∞–Ω—Ç–∏—Å–ø–∞–º
    ts_str = STATE["last_secret"].get(uid)
    if ts_str:
        try:
            last = datetime.fromisoformat(ts_str)
            if now - last < SECRET_COOLDOWN:
                left = SECRET_COOLDOWN - (now - last)
                mins = int(left.total_seconds() // 60)
                await update.message.reply_text(
                    f"–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å. –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë ~{mins} –º–∏–Ω ‚è≥",
                    reply_markup=menu
                )
                return
        except Exception:
            pass

    await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ‚Ä¶ üïµÔ∏è –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 50 —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å flood ‚Äî –ø–∞—É–∑–∞
    sent = 0
    for i in range(50):
        ok = await send_to_roma(context, f"üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! ‚Äî –æ—Ç {pretty_sender(u)} (—Å–µ–∫—Ä–µ—Ç #{i+1}/50)")
        if ok:
            sent += 1
        await asyncio.sleep(0.25)  # —â–∞–¥—è—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    STATE["last_secret"][uid] = now.isoformat()
    save_state(STATE)

    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent}/50 ‚úÖ", reply_markup=menu)

# –°–í–û–Å –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ï (–∫–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ª–æ–≥)
ASK_CUSTOM = 1

async def custom_wish_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–¥–µ—Å—å —Å–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –†–æ–º–µ –æ—Ç —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ ‚úçÔ∏è")
    return ASK_CUSTOM

async def custom_wish_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    txt = (update.message.text or "").strip()
    if not txt:
        await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üôè", reply_markup=menu)
        return ConversationHandler.END

    payload = f"üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç {pretty_sender(u)}:\n\n{txt}"
    ok = await send_to_roma(context, payload)
    if ok:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∏–ª! üéÅ", reply_markup=menu)
    else:
        await update.message.reply_text("–•–º, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ.", reply_markup=menu)
    return ConversationHandler.END

# –û–¢–ö–†–´–¢–ö–ê (–º–∏–ª—ã–π –±–æ–Ω—É—Å)
CARD_URLS = [
    # –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ —Å—Å—ã–ª–∫–∏ (—Ñ–æ—Ç–æ/–≥–∏—Ñ/—Å—Ç–∏–∫–µ—Ä—ã –∫–∞–∫ —Ñ–æ—Ç–æ)
    "https://i.imgur.com/jVx0y9N.jpg",
    "https://i.imgur.com/9Xj4QmT.jpg",
]

async def send_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(CARD_URLS) == 1:
            await context.bot.send_photo(update.effective_chat.id, CARD_URLS[0], caption="–û—Ç–∫—Ä—ã—Ç–∫–∞ –¥–ª—è –†–æ–º—ã üéÇ")
        else:
            media = [InputMediaPhoto(u) for u in CARD_URLS[:10]]
            await context.bot.send_media_group(update.effective_chat.id, media=media)
            await context.bot.send_message(update.effective_chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è –∏ –∂–º–∏ –Ω–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!")
    except Exception:
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôà")

# –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –û–†–ì–ê–ù–ò–ó–ê–¢–û–†–£
async def contact_org(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not ORGANIZER_ID:
        await update.message.reply_text("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòä", reply_markup=menu)
        return
    u = update.effective_user
    me = pretty_sender(u)
    await update.message.reply_text("–ü–µ—Ä–µ–¥–∞–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")
    try:
        await context.bot.send_message(ORGANIZER_ID, f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {me}: —Ö–æ—á–µ—Ç –ø–æ–æ–±—â–∞—Ç—å—Å—è –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞-–ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç–æ—Ä–∞.")
    except Exception:
        pass

# ----------------- –†–û–£–¢–ï–† –ö–ù–û–ü–û–ö -----------------
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    if txt == "üéâ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!":
        return await wish_hb(update, context)
    if txt == "‚ú® –í—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ":
        return await wish_best(update, context)
    if txt == "üïµÔ∏è –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ":
        return await wish_secret(update, context)
    if txt == "‚úçÔ∏è –°–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ":
        return await custom_wish_start(update, context)
    if txt == "üñº –û—Ç–∫—Ä—ã—Ç–∫–∞":
        return await send_card(update, context)
    if txt == "üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É":
        return await contact_org(update, context)
    if txt == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        return await restart(update, context)

# ----------------- –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö -----------------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("Unhandled exception", exc_info=context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("–û–π! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ù–∞–∂–º–∏ ¬´üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞¬ª üôÇ", reply_markup=menu)
    except Exception:
        pass

# ----------------- –ó–ê–ü–£–°–ö -----------------
if __name__ == "__main__":
    start_health_server()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_error_handler(on_error)

    # /start
    app.add_handler(CommandHandler("start", start))

    # –ö–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ª–æ–≥ ¬´—Å–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ¬ª
    custom_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚úçÔ∏è –°–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ$"), custom_wish_start)],
        states={
            ASK_CUSTOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_wish_send)]
        },
        fallbacks=[],
    )
    app.add_handler(custom_conv)

    # –†–æ—É—Ç–µ—Ä –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

    app.run_polling(drop_pending_updates=True)
